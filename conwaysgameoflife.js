"use strict";
var gameCanvas = document.getElementById("gameCanvas");
var a = true;
var d = false;
var firstInitializationArray = [
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        a, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        a, 
        a, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ], 
    [
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d, 
        d
    ]
];
function init() {
    var game = new ConwaysGameOfLife(firstInitializationArray, gameCanvas, "#000000", "#ffffff");
    game.run();
}
var ConwaysGameOfLife = (function () {
    function ConwaysGameOfLife(initializationArray, gameCanvas, aliveCellColor, deadCellColor) {
        this.gameCanvas = gameCanvas;
        this.aliveCellColor = aliveCellColor;
        this.deadCellColor = deadCellColor;
        if(initializationArray.length < 2 && initializationArray[0].length < 2) {
            throw RangeException;
        } else {
            var isInitializationArrayRectangleP = true;
            this.numberOfRows = firstInitializationArray.length;
            this.numberOfColumns = firstInitializationArray[0].length;
            for(var i = 0; i < this.numberOfRows; ++i) {
                if(initializationArray[i].length !== this.numberOfColumns) {
                    isInitializationArrayRectangleP = false;
                    break;
                }
            }
            if(!isInitializationArrayRectangleP) {
                throw RangeException;
            } else {
                this.arrayA = JSON.parse(JSON.stringify(initializationArray));
                this.arrayB = JSON.parse(JSON.stringify(this.arrayA));
                this.isArrayATheCurrentArray = true;
                this.gameCanvas.height = 25 * this.numberOfRows;
                this.gameCanvas.width = 25 * this.numberOfColumns;
            }
        }
    }
    ConwaysGameOfLife.prototype.isPointXYInRangeAndValid = function (x, y) {
        if(x < 0 || x >= this.numberOfRows) {
            return false;
        } else {
            if(y < 0 || y >= this.numberOfColumns) {
                return false;
            } else {
                return true;
            }
        }
    };
    ConwaysGameOfLife.prototype.getNumberOfAliveElementsAroundPointXYInCurrentArray = function (x, y) {
        var count = 0;
        var currentArray = this.isArrayATheCurrentArray ? this.arrayA : this.arrayB;
        for(var i = (x - 1); i < (x + 2); ++i) {
            for(var j = (y - 1); j < (y + 2); ++j) {
                if(this.isPointXYInRangeAndValid(i, j)) {
                    if(!(x === i && y === j)) {
                        count += currentArray[i][j] ? 1 : 0;
                    }
                }
            }
        }
        return count;
    };
    ConwaysGameOfLife.prototype.updateNonCurrentArrayAndSetAsCurrentArray = function () {
        var currentArray = this.isArrayATheCurrentArray ? this.arrayA : this.arrayB;
        var nonCurrentArray = (!this.isArrayATheCurrentArray) ? this.arrayA : this.arrayB;
        for(var i = 0; i < this.numberOfRows; ++i) {
            for(var j = 0; j < this.numberOfColumns; ++j) {
                var numberOfAliveNeighbours = this.getNumberOfAliveElementsAroundPointXYInCurrentArray(i, j);
                var isCellAlive = currentArray[i][j];
                if(isCellAlive) {
                    if(numberOfAliveNeighbours < 2) {
                        nonCurrentArray[i][j] = false;
                    } else if(numberOfAliveNeighbours < 4) {
                        nonCurrentArray[i][j] = true;
                    } else {
                        nonCurrentArray[i][j] = false;
                    }
                } else {
                    if(numberOfAliveNeighbours === 3) {
                        nonCurrentArray[i][j] = true;
                    } else {
                        nonCurrentArray[i][j] = false;
                    }
                }
            }
        }
        this.isArrayATheCurrentArray = !(this.isArrayATheCurrentArray);
    };
    ConwaysGameOfLife.prototype.drawCell = function (x, y, width, height, color) {
        var ctx = gameCanvas.getContext('2d');
        ctx.fillStyle = color;
        ctx.fillRect(x, y, width, height);
    };
    ConwaysGameOfLife.prototype.drawCurrentArrayOnCanvas = function () {
        var currentArray = this.isArrayATheCurrentArray ? this.arrayA : this.arrayB;
        var boardHeight = gameCanvas.height;
        var boardWidth = gameCanvas.width;
        var boardPieceWidth = boardWidth / this.numberOfColumns;
        var boardPieceHeight = boardHeight / this.numberOfRows;
        var y = 0;
        for(var i = 0; i < this.numberOfRows; ++i) {
            var x = 0;
            for(var j = 0; j < this.numberOfColumns; ++j) {
                var currentColor = (currentArray[i][j]) ? this.aliveCellColor : this.deadCellColor;
                this.drawCell(x, y, boardPieceWidth, boardPieceHeight, currentColor);
                x += boardPieceWidth;
            }
            y += boardPieceHeight;
        }
    };
    ConwaysGameOfLife.prototype.gameLoop = function () {
        this.drawCurrentArrayOnCanvas();
        this.updateNonCurrentArrayAndSetAsCurrentArray();
    };
    ConwaysGameOfLife.prototype.run = function () {
        var _this = this;
        setInterval(function () {
            return _this.gameLoop();
        }, 500);
    };
    return ConwaysGameOfLife;
})();
;
init();
//@ sourceMappingURL=conwaysgameoflife.js.map
